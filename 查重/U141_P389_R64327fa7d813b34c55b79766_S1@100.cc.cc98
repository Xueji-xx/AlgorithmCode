#include <stdio.h>#include <stdlib.h>long long merge(int arr[], int left, int mid, int right) {    int i, j, k;    long long inv = 0;    int n1 = mid - left + 1;    int n2 = right - mid;    int L[n1], R[n2];    for (i = 0; i < n1; i++)        L[i] = arr[left + i];    for (j = 0; j < n2; j++)        R[j] = arr[mid + 1 + j];    i = 0;    j = 0;    k = left;    while (i < n1 && j < n2) {        if (L[i] <= R[j]) {            arr[k++] = L[i++];        }        else {            arr[k++] = R[j++];            inv += n1 - i;        }    }    while (i < n1) {        arr[k++] = L[i++];    }    while (j < n2) {        arr[k++] = R[j++];    }    return inv;}long long mergeSort(int arr[], int left, int right) {    long long inv = 0;    if (left < right) {        int mid = left + (right - left) / 2;        inv += mergeSort(arr, left, mid);        inv += mergeSort(arr, mid + 1, right);        inv += merge(arr, left, mid, right);    }    return inv;}int main() {    int n;    scanf("%d", &n);    int arr[n];    for (int i = 0; i < n; i++) {        scanf("%d", &arr[i]);    }    long long ans = mergeSort(arr, 0, n - 1);    printf("%lld", ans);    return 0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intleft,intmid,intright){inti,j,k;longlonginv=0;intn1=mid-left+1;intn2=right-mid;intL[n1],R[n2];for(i=0;i<n1;i++)L[i]=arr[left+i];for(j=0;j<n2;j++)R[j]=arr[mid+1+j];i=0;j=0;k=left;while(i<n1&&j<n2){if(L[i]<=R[j]){arr[k++]=L[i++];}else{arr[k++]=R[j++];inv+=n1-i;}}while(i<n1){arr[k++]=L[i++];}while(j<n2){arr[k++]=R[j++];}returninv;}longlongmergeSort(intarr[],intleft,intright){longlonginv=0;if(left<right){intmid=left+(right-left)/2;inv+=mergeSort(arr,left,mid);inv+=mergeSort(arr,mid+1,right);inv+=merge(arr,left,mid,right);}returninv;}intmain(){intn;scanf("%d",&n);intarr[n];for(inti=0;i<n;i++){scanf("%d",&arr[i]);}longlongans=mergeSort(arr,0,n-1);printf("%lld",ans);return0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intleft,intmid,intright){inti,j,k;longlonginv=0;intn1=mid-left+1;intn2=right-mid;intL[n1],R[n2];for(i=0;i<n1;i++)L[i]=arr[left+i];for(j=0;j<n2;j++)R[j]=arr[mid+1+j];i=0;j=0;k=left;while(i<n1&&j<n2){if(L[i]<=R[j]){arr[k++]=L[i++];}else{arr[k++]=R[j++];inv+=n1-i;}}while(i<n1){arr[k++]=L[i++];}while(j<n2){arr[k++]=R[j++];}returninv;}longlongmergeSort(intarr[],intleft,intright){longlonginv=0;if(left<right){intmid=left+(right-left)/2;inv+=mergeSort(arr,left,mid);inv+=mergeSort(arr,mid+1,right);inv+=merge(arr,left,mid,right);}returninv;}intmain(){intn;scanf("%d",&n);intarr[n];for(inti=0;i<n;i++){scanf("%d",&arr[i]);}longlongans=mergeSort(arr,0,n-1);printf("%lld",ans);return0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intleft,intmid,intright){inti,j,k;longlonginv=0;intn1=mid-left+1;intn2=right-mid;intL[n1],R[n2];for(i=0;i<n1;i++)L[i]=arr[left+i];for(j=0;j<n2;j++)R[j]=arr[mid+1+j];i=0;j=0;k=left;while(i<n1&&j<n2){if(L[i]<=R[j]){arr[k++]=L[i++];}else{arr[k++]=R[j++];inv+=n1-i;}}while(i<n1){arr[k++]=L[i++];}while(j<n2){arr[k++]=R[j++];}returninv;}longlongmergeSort(intarr[],intleft,intright){longlonginv=0;if(left<right){intmid=left+(right-left)/2;inv+=mergeSort(arr,left,mid);inv+=mergeSort(arr,mid+1,right);inv+=merge(arr,left,mid,right);}returninv;}intmain(){intn;scanf("%d",&n);intarr[n];for(inti=0;i<n;i++){scanf("%d",&arr[i]);}longlongans=mergeSort(arr,0,n-1);printf("%lld",ans);return0;}