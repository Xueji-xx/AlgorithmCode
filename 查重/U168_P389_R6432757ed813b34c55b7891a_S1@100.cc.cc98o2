#include <stdio.h>#include <stdlib.h> const int N=5e5+10; long long merge_sort(int q[],int l,int r){	if(l==r) return 0;	int mid=(l+r)/2;		long long sum=merge_sort(q,l,mid)+merge_sort(q,mid+1,r);		int k=0,i=l,j=mid+1;	int *tmp=(int *)malloc(N*sizeof(int));		//归并过程 	while(i<=mid&&j<=r)	{		if(q[i]<=q[j]) tmp[k++]=q[i++];		else		{			tmp[k++]=q[j++];			sum+=mid-i+1;		 } 	}	//扫尾 	while(i<=mid) tmp[k++]=q[i++];	while(j<=r) tmp[k++]=q[j++];		//物归原主 	for(i=l,j=0;i<=r;i++,j++) q[i]=tmp[j];		free(tmp);	return sum;} int main(){	int n,i;		int *q=(int *)malloc(N*sizeof(int));		scanf("%d",&n);		for(i=0;i<n;i++) scanf("%d",&q[i]);		printf("%lld",merge_sort(q,0,n-1));		free(q);		return 0;}#include<stdio.h>#include<stdlib.h>constintN=5e5+10;longlongmerge_sort(intq[],intl,intr){	if(l==r)return0;	intmid=(l+r)/2;		longlongsum=merge_sort(q,l,mid)+merge_sort(q,mid+1,r);		intk=0,i=l,j=mid+1;	int*tmp=(int*)malloc(N*sizeof(int));		//归并过程	while(i<=mid&&j<=r)	{		if(q[i]<=q[j])tmp[k++]=q[i++];		else		{			tmp[k++]=q[j++];			sum+=mid-i+1;		}	}	//扫尾	while(i<=mid)tmp[k++]=q[i++];	while(j<=r)tmp[k++]=q[j++];		//物归原主	for(i=l,j=0;i<=r;i++,j++)q[i]=tmp[j];		free(tmp);	returnsum;}intmain(){	intn,i;		int*q=(int*)malloc(N*sizeof(int));		scanf("%d",&n);		for(i=0;i<n;i++)scanf("%d",&q[i]);		printf("%lld",merge_sort(q,0,n-1));		free(q);		return0;}#include<stdio.h>#include<stdlib.h>constintN=5e5+10;longlongmerge_sort(intq[],intl,intr){if(l==r)return0;intmid=(l+r)/2;longlongsum=merge_sort(q,l,mid)+merge_sort(q,mid+1,r);intk=0,i=l,j=mid+1;int*tmp=(int*)malloc(N*sizeof(int));//归并过程while(i<=mid&&j<=r){if(q[i]<=q[j])tmp[k++]=q[i++];else{tmp[k++]=q[j++];sum+=mid-i+1;}}//扫尾while(i<=mid)tmp[k++]=q[i++];while(j<=r)tmp[k++]=q[j++];//物归原主for(i=l,j=0;i<=r;i++,j++)q[i]=tmp[j];free(tmp);returnsum;}intmain(){intn,i;int*q=(int*)malloc(N*sizeof(int));scanf("%d",&n);for(i=0;i<n;i++)scanf("%d",&q[i]);printf("%lld",merge_sort(q,0,n-1));free(q);return0;}#include<stdio.h>#include<stdlib.h>constintN=5e5+10;longlongmerge_sort(intq[],intl,intr){if(l==r)return0;intmid=(l+r)/2;longlongsum=merge_sort(q,l,mid)+merge_sort(q,mid+1,r);intk=0,i=l,j=mid+1;int*tmp=(int*)malloc(N*sizeof(int));//归并过程while(i<=mid&&j<=r){if(q[i]<=q[j])tmp[k++]=q[i++];else{tmp[k++]=q[j++];sum+=mid-i+1;}}//扫尾while(i<=mid)tmp[k++]=q[i++];while(j<=r)tmp[k++]=q[j++];//物归原主for(i=l,j=0;i<=r;i++,j++)q[i]=tmp[j];free(tmp);returnsum;}intmain(){intn,i;int*q=(int*)malloc(N*sizeof(int));scanf("%d",&n);for(i=0;i<n;i++)scanf("%d",&q[i]);printf("%lld",merge_sort(q,0,n-1));free(q);return0;}