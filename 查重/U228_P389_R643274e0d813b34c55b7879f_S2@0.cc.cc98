#include <stdio.h>#include <stdlib.h>long long merge(int arr[], int l, int mid, int r) {    int n1 = mid - l + 1, n2 = r - mid;    int left[n1], right[n2];    for (int i = 0; i < n1; i++) {        left[i] = arr[l + i];    }    for (int i = 0; i < n2; i++) {        right[i] = arr[mid + 1 + i];    }    int i = 0, j = 0, k = l;    long long count = 0;    while (i < n1 && j < n2) {        if (left[i] <= right[j]) {            arr[k++] = left[i++];        } else {            arr[k++] = right[j++];            count += n1 - i;        }    }    while (i < n1) {        arr[k++] = left[i++];    }    while (j < n2) {        arr[k++] = right[j++];    }    return count;}long long mergeSort(int arr[], int l, int r) {    long long count = 0;    if (l < r) {        int mid = l + (r - l) / 2;        count += mergeSort(arr, l, mid);        count += mergeSort(arr, mid + 1, r);        count += merge(arr, l, mid, r);    }    return count;}int main() {    int n;    printf("���������鳤�ȣ�");    scanf("%d", &n);    int arr[n];    printf("����������Ԫ�أ�");    for (int i = 0; i < n; i++) {        scanf("%d", &arr[i]);    }    long long count = mergeSort(arr, 0, n - 1);    printf("���������Ϊ��%lld\n", count);    return 0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intl,intmid,intr){intn1=mid-l+1,n2=r-mid;intleft[n1],right[n2];for(inti=0;i<n1;i++){left[i]=arr[l+i];}for(inti=0;i<n2;i++){right[i]=arr[mid+1+i];}inti=0,j=0,k=l;longlongcount=0;while(i<n1&&j<n2){if(left[i]<=right[j]){arr[k++]=left[i++];}else{arr[k++]=right[j++];count+=n1-i;}}while(i<n1){arr[k++]=left[i++];}while(j<n2){arr[k++]=right[j++];}returncount;}longlongmergeSort(intarr[],intl,intr){longlongcount=0;if(l<r){intmid=l+(r-l)/2;count+=mergeSort(arr,l,mid);count+=mergeSort(arr,mid+1,r);count+=merge(arr,l,mid,r);}returncount;}intmain(){intn;printf("���������鳤�ȣ�");scanf("%d",&n);intarr[n];printf("����������Ԫ�أ�");for(inti=0;i<n;i++){scanf("%d",&arr[i]);}longlongcount=mergeSort(arr,0,n-1);printf("���������Ϊ��%lld\n",count);return0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intl,intmid,intr){intn1=mid-l+1,n2=r-mid;intleft[n1],right[n2];for(inti=0;i<n1;i++){left[i]=arr[l+i];}for(inti=0;i<n2;i++){right[i]=arr[mid+1+i];}inti=0,j=0,k=l;longlongcount=0;while(i<n1&&j<n2){if(left[i]<=right[j]){arr[k++]=left[i++];}else{arr[k++]=right[j++];count+=n1-i;}}while(i<n1){arr[k++]=left[i++];}while(j<n2){arr[k++]=right[j++];}returncount;}longlongmergeSort(intarr[],intl,intr){longlongcount=0;if(l<r){intmid=l+(r-l)/2;count+=mergeSort(arr,l,mid);count+=mergeSort(arr,mid+1,r);count+=merge(arr,l,mid,r);}returncount;}intmain(){intn;printf("���������鳤�ȣ�");scanf("%d",&n);intarr[n];printf("����������Ԫ�أ�");for(inti=0;i<n;i++){scanf("%d",&arr[i]);}longlongcount=mergeSort(arr,0,n-1);printf("���������Ϊ��%lld\n",count);return0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intl,intmid,intr){intn1=mid-l+1,n2=r-mid;intleft[n1],right[n2];for(inti=0;i<n1;i++){left[i]=arr[l+i];}for(inti=0;i<n2;i++){right[i]=arr[mid+1+i];}inti=0,j=0,k=l;longlongcount=0;while(i<n1&&j<n2){if(left[i]<=right[j]){arr[k++]=left[i++];}else{arr[k++]=right[j++];count+=n1-i;}}while(i<n1){arr[k++]=left[i++];}while(j<n2){arr[k++]=right[j++];}returncount;}longlongmergeSort(intarr[],intl,intr){longlongcount=0;if(l<r){intmid=l+(r-l)/2;count+=mergeSort(arr,l,mid);count+=mergeSort(arr,mid+1,r);count+=merge(arr,l,mid,r);}returncount;}intmain(){intn;printf("���������鳤�ȣ�");scanf("%d",&n);intarr[n];printf("����������Ԫ�أ�");for(inti=0;i<n;i++){scanf("%d",&arr[i]);}longlongcount=mergeSort(arr,0,n-1);printf("���������Ϊ��%lld\n",count);return0;}