#include <stdio.h>int main(){    int n;    char c;    scanf("%d %c", &n, &c);    int level = 1; // 当前金字塔的高度    int bricks = 1; // 当前金字塔的砖块数    while (bricks <= n) {        level++; // 尝试构建新的金字塔        bricks = bricks + (level - 1) * 2 + 1; // 计算新金字塔的砖块数    }    level--; // 最后一次循环无法构建出新的金字塔，因此需要减1    int used_bricks = 1; // 已经使用的砖块数    for (int i = 1; i <= level; i++) { // 从底部往上构建金字塔        int num = (i - 1) * 2 + 1; // 当前层的砖块数        int spaces = level - i; // 当前层左侧的空格数        for (int j = 0; j < spaces; j++) { // 打印左侧空格            printf(" ");        }        for (int j = 0; j < num; j++) { // 打印当前层的砖块或空格            if (used_bricks <= n) {                printf("%c", c); // 打印砖块            } else {                printf(" "); // 打印空格            }            used_bricks++;        }        printf("\n"); // 换行    }    int remain_bricks = n - used_bricks + 1; // 剩余砖块数    printf("%d\n", remain_bricks); // 打印剩余砖块数    return 0;}#include<stdio.h>intmain(){intn;charc;scanf("%d%c",&n,&c);intlevel=1;//当前金字塔的高度intbricks=1;//当前金字塔的砖块数while(bricks<=n){level++;//尝试构建新的金字塔bricks=bricks+(level-1)*2+1;//计算新金字塔的砖块数}level--;//最后一次循环无法构建出新的金字塔，因此需要减1intused_bricks=1;//已经使用的砖块数for(inti=1;i<=level;i++){//从底部往上构建金字塔intnum=(i-1)*2+1;//当前层的砖块数intspaces=level-i;//当前层左侧的空格数for(intj=0;j<spaces;j++){//打印左侧空格printf("");}for(intj=0;j<num;j++){//打印当前层的砖块或空格if(used_bricks<=n){printf("%c",c);//打印砖块}else{printf("");//打印空格}used_bricks++;}printf("\n");//换行}intremain_bricks=n-used_bricks+1;//剩余砖块数printf("%d\n",remain_bricks);//打印剩余砖块数return0;}#include<stdio.h>intmain(){intn;charc;scanf("%d%c",&n,&c);intlevel=1;//当前金字塔的高度intbricks=1;//当前金字塔的砖块数while(bricks<=n){level++;//尝试构建新的金字塔bricks=bricks+(level-1)*2+1;//计算新金字塔的砖块数}level--;//最后一次循环无法构建出新的金字塔，因此需要减1intused_bricks=1;//已经使用的砖块数for(inti=1;i<=level;i++){//从底部往上构建金字塔intnum=(i-1)*2+1;//当前层的砖块数intspaces=level-i;//当前层左侧的空格数for(intj=0;j<spaces;j++){//打印左侧空格printf("");}for(intj=0;j<num;j++){//打印当前层的砖块或空格if(used_bricks<=n){printf("%c",c);//打印砖块}else{printf("");//打印空格}used_bricks++;}printf("\n");//换行}intremain_bricks=n-used_bricks+1;//剩余砖块数printf("%d\n",remain_bricks);//打印剩余砖块数return0;}#include<stdio.h>intmain(){intn;charc;scanf("%d%c",&n,&c);intlevel=1;//当前金字塔的高度intbricks=1;//当前金字塔的砖块数while(bricks<=n){level++;//尝试构建新的金字塔bricks=bricks+(level-1)*2+1;//计算新金字塔的砖块数}level--;//最后一次循环无法构建出新的金字塔，因此需要减1intused_bricks=1;//已经使用的砖块数for(inti=1;i<=level;i++){//从底部往上构建金字塔intnum=(i-1)*2+1;//当前层的砖块数intspaces=level-i;//当前层左侧的空格数for(intj=0;j<spaces;j++){//打印左侧空格printf("");}for(intj=0;j<num;j++){//打印当前层的砖块或空格if(used_bricks<=n){printf("%c",c);//打印砖块}else{printf("");//打印空格}used_bricks++;}printf("\n");//换行}intremain_bricks=n-used_bricks+1;//剩余砖块数printf("%d\n",remain_bricks);//打印剩余砖块数return0;}