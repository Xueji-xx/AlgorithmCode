#include <iostream>#include <vector>using namespace std;typedef long long LL;// 归并排序合并两个有序数组，并统计逆序对数目LL merge(vector<int>& nums, int left, int mid, int right) {    vector<int> temp(right-left+1);  // 辅助数组    int i = left, j = mid+1, k = 0;    LL cnt = 0;  // 统计逆序对数目    while (i <= mid && j <= right) {        if (nums[i] <= nums[j]) {            temp[k++] = nums[i++];        } else {            temp[k++] = nums[j++];            cnt += mid - i + 1;  // 统计逆序对数目        }    }    while (i <= mid) temp[k++] = nums[i++];    while (j <= right) temp[k++] = nums[j++];    for (int i = 0; i < temp.size(); i++) nums[left+i] = temp[i];    return cnt;}// 归并排序求解逆序对，返回逆序对数目LL mergeSort(vector<int>& nums, int left, int right) {    if (left >= right) return 0;  // 递归边界    int mid = (left + right) / 2;    LL cnt = mergeSort(nums, left, mid) + mergeSort(nums, mid+1, right);  // 左右子数组逆序对数目之和    cnt += merge(nums, left, mid, right);  // 合并两个子数组，并返回全局逆序对数目    return cnt;}int main() {    int n;    cin >> n;    vector<int> nums(n);    for (int i = 0; i < n; i++) {        cin >> nums[i];    }    cout << mergeSort(nums, 0, n-1) << endl;    return 0;}#include<iostream>#include<vector>usingnamespacestd;typedeflonglongLL;//归并排序合并两个有序数组，并统计逆序对数目LLmerge(vector<int>&nums,intleft,intmid,intright){vector<int>temp(right-left+1);//辅助数组inti=left,j=mid+1,k=0;LLcnt=0;//统计逆序对数目while(i<=mid&&j<=right){if(nums[i]<=nums[j]){temp[k++]=nums[i++];}else{temp[k++]=nums[j++];cnt+=mid-i+1;//统计逆序对数目}}while(i<=mid)temp[k++]=nums[i++];while(j<=right)temp[k++]=nums[j++];for(inti=0;i<temp.size();i++)nums[left+i]=temp[i];returncnt;}//归并排序求解逆序对，返回逆序对数目LLmergeSort(vector<int>&nums,intleft,intright){if(left>=right)return0;//递归边界intmid=(left+right)/2;LLcnt=mergeSort(nums,left,mid)+mergeSort(nums,mid+1,right);//左右子数组逆序对数目之和cnt+=merge(nums,left,mid,right);//合并两个子数组，并返回全局逆序对数目returncnt;}intmain(){intn;cin>>n;vector<int>nums(n);for(inti=0;i<n;i++){cin>>nums[i];}cout<<mergeSort(nums,0,n-1)<<endl;return0;}#include<iostream>#include<vector>usingnamespacestd;typedeflonglongLL;//归并排序合并两个有序数组，并统计逆序对数目LLmerge(vector<int>&nums,intleft,intmid,intright){vector<int>temp(right-left+1);//辅助数组inti=left,j=mid+1,k=0;LLcnt=0;//统计逆序对数目while(i<=mid&&j<=right){if(nums[i]<=nums[j]){temp[k++]=nums[i++];}else{temp[k++]=nums[j++];cnt+=mid-i+1;//统计逆序对数目}}while(i<=mid)temp[k++]=nums[i++];while(j<=right)temp[k++]=nums[j++];for(inti=0;i<temp.size();i++)nums[left+i]=temp[i];returncnt;}//归并排序求解逆序对，返回逆序对数目LLmergeSort(vector<int>&nums,intleft,intright){if(left>=right)return0;//递归边界intmid=(left+right)/2;LLcnt=mergeSort(nums,left,mid)+mergeSort(nums,mid+1,right);//左右子数组逆序对数目之和cnt+=merge(nums,left,mid,right);//合并两个子数组，并返回全局逆序对数目returncnt;}intmain(){intn;cin>>n;vector<int>nums(n);for(inti=0;i<n;i++){cin>>nums[i];}cout<<mergeSort(nums,0,n-1)<<endl;return0;}#include<iostream>#include<vector>usingnamespacestd;typedeflonglongLL;//归并排序合并两个有序数组，并统计逆序对数目LLmerge(vector<int>&nums,intleft,intmid,intright){vector<int>temp(right-left+1);//辅助数组inti=left,j=mid+1,k=0;LLcnt=0;//统计逆序对数目while(i<=mid&&j<=right){if(nums[i]<=nums[j]){temp[k++]=nums[i++];}else{temp[k++]=nums[j++];cnt+=mid-i+1;//统计逆序对数目}}while(i<=mid)temp[k++]=nums[i++];while(j<=right)temp[k++]=nums[j++];for(inti=0;i<temp.size();i++)nums[left+i]=temp[i];returncnt;}//归并排序求解逆序对，返回逆序对数目LLmergeSort(vector<int>&nums,intleft,intright){if(left>=right)return0;//递归边界intmid=(left+right)/2;LLcnt=mergeSort(nums,left,mid)+mergeSort(nums,mid+1,right);//左右子数组逆序对数目之和cnt+=merge(nums,left,mid,right);//合并两个子数组，并返回全局逆序对数目returncnt;}intmain(){intn;cin>>n;vector<int>nums(n);for(inti=0;i<n;i++){cin>>nums[i];}cout<<mergeSort(nums,0,n-1)<<endl;return0;}