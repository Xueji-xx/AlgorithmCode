#include <iostream>#include <vector>using namespace std;long long merge(vector<int>& arr, int left, int mid, int right) {    vector<int> temp(right - left + 1);    int i = left, j = mid + 1, k = 0;    long long count = 0;    while (i <= mid && j <= right) {        if (arr[i] <= arr[j]) {            temp[k++] = arr[i++];        } else {            temp[k++] = arr[j++];            count += mid - i + 1;        }    }    while (i <= mid) {        temp[k++] = arr[i++];    }    while (j <= right) {        temp[k++] = arr[j++];    }    for (int i = left, k = 0; i <= right; i++, k++) {        arr[i] = temp[k];    }    return count;}long long merge_sort(vector<int>& arr, int left, int right) {    if (left >= right) {        return 0;    }    int mid = left + (right - left) / 2;    long long count = 0;    count += merge_sort(arr, left, mid);    count += merge_sort(arr, mid + 1, right);    count += merge(arr, left, mid, right);    return count;}int main() {    int n;    cin >> n;    vector<int> arr(n);    for (int i = 0; i < n; i++) {        cin >> arr[i];    }    long long inversions = merge_sort(arr, 0, n - 1);    cout << inversions << endl;    return 0;}#include<iostream>#include<vector>usingnamespacestd;longlongmerge(vector<int>&arr,intleft,intmid,intright){vector<int>temp(right-left+1);inti=left,j=mid+1,k=0;longlongcount=0;while(i<=mid&&j<=right){if(arr[i]<=arr[j]){temp[k++]=arr[i++];}else{temp[k++]=arr[j++];count+=mid-i+1;}}while(i<=mid){temp[k++]=arr[i++];}while(j<=right){temp[k++]=arr[j++];}for(inti=left,k=0;i<=right;i++,k++){arr[i]=temp[k];}returncount;}longlongmerge_sort(vector<int>&arr,intleft,intright){if(left>=right){return0;}intmid=left+(right-left)/2;longlongcount=0;count+=merge_sort(arr,left,mid);count+=merge_sort(arr,mid+1,right);count+=merge(arr,left,mid,right);returncount;}intmain(){intn;cin>>n;vector<int>arr(n);for(inti=0;i<n;i++){cin>>arr[i];}longlonginversions=merge_sort(arr,0,n-1);cout<<inversions<<endl;return0;}#include<iostream>#include<vector>usingnamespacestd;longlongmerge(vector<int>&arr,intleft,intmid,intright){vector<int>temp(right-left+1);inti=left,j=mid+1,k=0;longlongcount=0;while(i<=mid&&j<=right){if(arr[i]<=arr[j]){temp[k++]=arr[i++];}else{temp[k++]=arr[j++];count+=mid-i+1;}}while(i<=mid){temp[k++]=arr[i++];}while(j<=right){temp[k++]=arr[j++];}for(inti=left,k=0;i<=right;i++,k++){arr[i]=temp[k];}returncount;}longlongmerge_sort(vector<int>&arr,intleft,intright){if(left>=right){return0;}intmid=left+(right-left)/2;longlongcount=0;count+=merge_sort(arr,left,mid);count+=merge_sort(arr,mid+1,right);count+=merge(arr,left,mid,right);returncount;}intmain(){intn;cin>>n;vector<int>arr(n);for(inti=0;i<n;i++){cin>>arr[i];}longlonginversions=merge_sort(arr,0,n-1);cout<<inversions<<endl;return0;}#include<iostream>#include<vector>usingnamespacestd;longlongmerge(vector<int>&arr,intleft,intmid,intright){vector<int>temp(right-left+1);inti=left,j=mid+1,k=0;longlongcount=0;while(i<=mid&&j<=right){if(arr[i]<=arr[j]){temp[k++]=arr[i++];}else{temp[k++]=arr[j++];count+=mid-i+1;}}while(i<=mid){temp[k++]=arr[i++];}while(j<=right){temp[k++]=arr[j++];}for(inti=left,k=0;i<=right;i++,k++){arr[i]=temp[k];}returncount;}longlongmerge_sort(vector<int>&arr,intleft,intright){if(left>=right){return0;}intmid=left+(right-left)/2;longlongcount=0;count+=merge_sort(arr,left,mid);count+=merge_sort(arr,mid+1,right);count+=merge(arr,left,mid,right);returncount;}intmain(){intn;cin>>n;vector<int>arr(n);for(inti=0;i<n;i++){cin>>arr[i];}longlonginversions=merge_sort(arr,0,n-1);cout<<inversions<<endl;return0;}