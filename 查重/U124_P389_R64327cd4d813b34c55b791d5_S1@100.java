import java.util.Scanner;public class Main {    static int n;    static int[] a;    static int[] b;    static long ans=0;    public static void main(String[] args) {        Scanner sc=new Scanner(System.in);        n= sc.nextInt();        a=new int[n+1];        b=new int[n+1];        for (int i = 1; i <= n; i++) {            a[i]= sc.nextInt();        }        MergeSort(1,n);        System.out.println(ans);    }    public static void  MergeSort(int l, int r){        if(l<r){            int mid=(l+r)/2;            MergeSort(l,mid);            MergeSort(mid+1,r);            Merge(l,mid,r);        }    }    public static void Merge(int l, int mid, int r){        int i=l, j=mid+1, k=l;        while ((i<=mid) &&(j<=r)){            if(a[i]>a[j]){                b[k++]=a[j++];                ans+=mid-i+1;            }else{                b[k++]=a[i++];            }        }        if(i>mid){            for (int m = j; m <=r ; m++) {                b[k++]=a[m];            }        }else{            for (int m = i; m <=mid ; m++) {                b[k++]=a[m];            }        }        for (int m = l; m <=r ; m++) {            a[m]=b[m];        }    }}importjava.util.Scanner;publicclassMain{staticintn;staticint[]a;staticint[]b;staticlongans=0;publicstaticvoidmain(String[]args){Scannersc=newScanner(System.in);n=sc.nextInt();a=newint[n+1];b=newint[n+1];for(inti=1;i<=n;i++){a[i]=sc.nextInt();}MergeSort(1,n);System.out.println(ans);}publicstaticvoidMergeSort(intl,intr){if(l<r){intmid=(l+r)/2;MergeSort(l,mid);MergeSort(mid+1,r);Merge(l,mid,r);}}publicstaticvoidMerge(intl,intmid,intr){inti=l,j=mid+1,k=l;while((i<=mid)&&(j<=r)){if(a[i]>a[j]){b[k++]=a[j++];ans+=mid-i+1;}else{b[k++]=a[i++];}}if(i>mid){for(intm=j;m<=r;m++){b[k++]=a[m];}}else{for(intm=i;m<=mid;m++){b[k++]=a[m];}}for(intm=l;m<=r;m++){a[m]=b[m];}}}importjava.util.Scanner;publicclassMain{staticintn;staticint[]a;staticint[]b;staticlongans=0;publicstaticvoidmain(String[]args){Scannersc=newScanner(System.in);n=sc.nextInt();a=newint[n+1];b=newint[n+1];for(inti=1;i<=n;i++){a[i]=sc.nextInt();}MergeSort(1,n);System.out.println(ans);}publicstaticvoidMergeSort(intl,intr){if(l<r){intmid=(l+r)/2;MergeSort(l,mid);MergeSort(mid+1,r);Merge(l,mid,r);}}publicstaticvoidMerge(intl,intmid,intr){inti=l,j=mid+1,k=l;while((i<=mid)&&(j<=r)){if(a[i]>a[j]){b[k++]=a[j++];ans+=mid-i+1;}else{b[k++]=a[i++];}}if(i>mid){for(intm=j;m<=r;m++){b[k++]=a[m];}}else{for(intm=i;m<=mid;m++){b[k++]=a[m];}}for(intm=l;m<=r;m++){a[m]=b[m];}}}importjava.util.Scanner;publicclassMain{staticintn;staticint[]a;staticint[]b;staticlongans=0;publicstaticvoidmain(String[]args){Scannersc=newScanner(System.in);n=sc.nextInt();a=newint[n+1];b=newint[n+1];for(inti=1;i<=n;i++){a[i]=sc.nextInt();}MergeSort(1,n);System.out.println(ans);}publicstaticvoidMergeSort(intl,intr){if(l<r){intmid=(l+r)/2;MergeSort(l,mid);MergeSort(mid+1,r);Merge(l,mid,r);}}publicstaticvoidMerge(intl,intmid,intr){inti=l,j=mid+1,k=l;while((i<=mid)&&(j<=r)){if(a[i]>a[j]){b[k++]=a[j++];ans+=mid-i+1;}else{b[k++]=a[i++];}}if(i>mid){for(intm=j;m<=r;m++){b[k++]=a[m];}}else{for(intm=i;m<=mid;m++){b[k++]=a[m];}}for(intm=l;m<=r;m++){a[m]=b[m];}}}