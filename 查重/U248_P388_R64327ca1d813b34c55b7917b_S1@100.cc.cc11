#include <iostream>using namespace std;string dfs(int n) {    if (n == 0)        return "";    else if (n == 1)        return "2(0)";        // find the highest bit position of n in binary representation    int k = 0;    while ((1 << k) <= n) {        k++;    }    k--;        string result;    if (k == 1) {        result += "2";    } else {        result += "2(" + dfs(k) + ")";    }    int d = n - (1 << k);    if (d != 0) {        result += "+";        result += dfs(d);    }    return result;}int main() {    int n;    cin >> n;    cout << dfs(n) << endl;    return 0;}#include<iostream>usingnamespacestd;stringdfs(intn){if(n==0)return"";elseif(n==1)return"2(0)";//findthehighestbitpositionofninbinaryrepresentationintk=0;while((1<<k)<=n){k++;}k--;stringresult;if(k==1){result+="2";}else{result+="2("+dfs(k)+")";}intd=n-(1<<k);if(d!=0){result+="+";result+=dfs(d);}returnresult;}intmain(){intn;cin>>n;cout<<dfs(n)<<endl;return0;}#include<iostream>usingnamespacestd;stringdfs(intn){if(n==0)return"";elseif(n==1)return"2(0)";//findthehighestbitpositionofninbinaryrepresentationintk=0;while((1<<k)<=n){k++;}k--;stringresult;if(k==1){result+="2";}else{result+="2("+dfs(k)+")";}intd=n-(1<<k);if(d!=0){result+="+";result+=dfs(d);}returnresult;}intmain(){intn;cin>>n;cout<<dfs(n)<<endl;return0;}#include<iostream>usingnamespacestd;stringdfs(intn){if(n==0)return"";elseif(n==1)return"2(0)";//findthehighestbitpositionofninbinaryrepresentationintk=0;while((1<<k)<=n){k++;}k--;stringresult;if(k==1){result+="2";}else{result+="2("+dfs(k)+")";}intd=n-(1<<k);if(d!=0){result+="+";result+=dfs(d);}returnresult;}intmain(){intn;cin>>n;cout<<dfs(n)<<endl;return0;}