#include <iostream>#include <cmath>#include <algorithm> #include <cstring>using namespace std;typedef long long ll;const int maxn = 5e5 + 10;int a[maxn];int b[maxn];int c[maxn];int d[maxn];ll n, ans;void discrete(int *s) {	for(int i = 1; i <= n; i++)		d[i] = s[i];	int k = unique(d + 1, d + 1 + n) - d - 1;	sort(d + 1, d + 1 + k);	for(int i = 1; i <= n; i++) {		s[i] = lower_bound(d + 1, d + 1 + k, s[i]) - d; 	}} void merge_sort(int l, int r) {	if(l == r)	return;	int mid = l + r >> 1;	merge_sort(l, mid);	merge_sort(mid + 1, r);	int i = l, j = mid + 1, k = l;	while(i <= mid && j <= r) {		if(c[i] <= c[j])	d[k++] = c[i++];		else	ans += mid - i + 1,  d[k++] = c[j++];		}	while(i <= mid) d[k++] = c[i++];	while(j <= r)	d[k++] = c[j++];	for(int i = l; i <= r; i++)	c[i] = d[i];}int main() {	cin >> n;	for(int i = 1; i <= n; i++)		cin >> c[i];	merge_sort(1, n);	cout << ans << endl;	return 0;}#include<iostream>#include<cmath>#include<algorithm>#include<cstring>usingnamespacestd;typedeflonglongll;constintmaxn=5e5+10;inta[maxn];intb[maxn];intc[maxn];intd[maxn];lln,ans;voiddiscrete(int*s){	for(inti=1;i<=n;i++)		d[i]=s[i];	intk=unique(d+1,d+1+n)-d-1;	sort(d+1,d+1+k);	for(inti=1;i<=n;i++){		s[i]=lower_bound(d+1,d+1+k,s[i])-d;	}}voidmerge_sort(intl,intr){	if(l==r)	return;	intmid=l+r>>1;	merge_sort(l,mid);	merge_sort(mid+1,r);	inti=l,j=mid+1,k=l;	while(i<=mid&&j<=r){		if(c[i]<=c[j])	d[k++]=c[i++];		else	ans+=mid-i+1,d[k++]=c[j++];		}	while(i<=mid)d[k++]=c[i++];	while(j<=r)	d[k++]=c[j++];	for(inti=l;i<=r;i++)	c[i]=d[i];}intmain(){	cin>>n;	for(inti=1;i<=n;i++)		cin>>c[i];	merge_sort(1,n);	cout<<ans<<endl;	return0;}#include<iostream>#include<cmath>#include<algorithm>#include<cstring>usingnamespacestd;typedeflonglongll;constintmaxn=5e5+10;inta[maxn];intb[maxn];intc[maxn];intd[maxn];lln,ans;voiddiscrete(int*s){for(inti=1;i<=n;i++)d[i]=s[i];intk=unique(d+1,d+1+n)-d-1;sort(d+1,d+1+k);for(inti=1;i<=n;i++){s[i]=lower_bound(d+1,d+1+k,s[i])-d;}}voidmerge_sort(intl,intr){if(l==r)return;intmid=l+r>>1;merge_sort(l,mid);merge_sort(mid+1,r);inti=l,j=mid+1,k=l;while(i<=mid&&j<=r){if(c[i]<=c[j])d[k++]=c[i++];elseans+=mid-i+1,d[k++]=c[j++];}while(i<=mid)d[k++]=c[i++];while(j<=r)d[k++]=c[j++];for(inti=l;i<=r;i++)c[i]=d[i];}intmain(){cin>>n;for(inti=1;i<=n;i++)cin>>c[i];merge_sort(1,n);cout<<ans<<endl;return0;}#include<iostream>#include<cmath>#include<algorithm>#include<cstring>usingnamespacestd;typedeflonglongll;constintmaxn=5e5+10;inta[maxn];intb[maxn];intc[maxn];intd[maxn];lln,ans;voiddiscrete(int*s){for(inti=1;i<=n;i++)d[i]=s[i];intk=unique(d+1,d+1+n)-d-1;sort(d+1,d+1+k);for(inti=1;i<=n;i++){s[i]=lower_bound(d+1,d+1+k,s[i])-d;}}voidmerge_sort(intl,intr){if(l==r)return;intmid=l+r>>1;merge_sort(l,mid);merge_sort(mid+1,r);inti=l,j=mid+1,k=l;while(i<=mid&&j<=r){if(c[i]<=c[j])d[k++]=c[i++];elseans+=mid-i+1,d[k++]=c[j++];}while(i<=mid)d[k++]=c[i++];while(j<=r)d[k++]=c[j++];for(inti=l;i<=r;i++)c[i]=d[i];}intmain(){cin>>n;for(inti=1;i<=n;i++)cin>>c[i];merge_sort(1,n);cout<<ans<<endl;return0;}