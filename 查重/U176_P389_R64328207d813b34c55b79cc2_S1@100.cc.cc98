#include<iostream>using namespace std;int a[500000],temp[500000];long long ans;void merge_sort(int a[], int temp[], int l, int mid, int r){	int i = l, j = mid + 1;	int k = l;	while (i <= mid && j <= r)	{		if (a[i] > a[j])		{			ans += mid - i + 1;			temp[k++] = a[j++];		}		else		{			temp[k++] = a[i++];		}	}	while (i <= mid)	{		temp[k++] = a[i++];	}	while (j <= r)	{		temp[k++] = a[j++];	}	//复制	for (i = l; i <= r; i++)	{		a[i] = temp[i];	}	return;}void merge(int a[], int l, int r, int temp[]){	if (l < r)	{		int mid = (l + r) / 2;		merge(a, l, mid, temp);		merge(a, mid + 1, r,temp);		merge_sort(a, temp,l, mid, r);	}}int main(){	int n;	cin >> n;	int i;	for (i = 1; i <= n; i++)	{		cin >> a[i];	}	merge(a, 1, n, temp);	cout << ans << endl;	return 0;}#include<iostream>usingnamespacestd;inta[500000],temp[500000];longlongans;voidmerge_sort(inta[],inttemp[],intl,intmid,intr){	inti=l,j=mid+1;	intk=l;	while(i<=mid&&j<=r)	{		if(a[i]>a[j])		{			ans+=mid-i+1;			temp[k++]=a[j++];		}		else		{			temp[k++]=a[i++];		}	}	while(i<=mid)	{		temp[k++]=a[i++];	}	while(j<=r)	{		temp[k++]=a[j++];	}	//复制	for(i=l;i<=r;i++)	{		a[i]=temp[i];	}	return;}voidmerge(inta[],intl,intr,inttemp[]){	if(l<r)	{		intmid=(l+r)/2;		merge(a,l,mid,temp);		merge(a,mid+1,r,temp);		merge_sort(a,temp,l,mid,r);	}}intmain(){	intn;	cin>>n;	inti;	for(i=1;i<=n;i++)	{		cin>>a[i];	}	merge(a,1,n,temp);	cout<<ans<<endl;	return0;}#include<iostream>usingnamespacestd;inta[500000],temp[500000];longlongans;voidmerge_sort(inta[],inttemp[],intl,intmid,intr){inti=l,j=mid+1;intk=l;while(i<=mid&&j<=r){if(a[i]>a[j]){ans+=mid-i+1;temp[k++]=a[j++];}else{temp[k++]=a[i++];}}while(i<=mid){temp[k++]=a[i++];}while(j<=r){temp[k++]=a[j++];}//复制for(i=l;i<=r;i++){a[i]=temp[i];}return;}voidmerge(inta[],intl,intr,inttemp[]){if(l<r){intmid=(l+r)/2;merge(a,l,mid,temp);merge(a,mid+1,r,temp);merge_sort(a,temp,l,mid,r);}}intmain(){intn;cin>>n;inti;for(i=1;i<=n;i++){cin>>a[i];}merge(a,1,n,temp);cout<<ans<<endl;return0;}#include<iostream>usingnamespacestd;inta[500000],temp[500000];longlongans;voidmerge_sort(inta[],inttemp[],intl,intmid,intr){inti=l,j=mid+1;intk=l;while(i<=mid&&j<=r){if(a[i]>a[j]){ans+=mid-i+1;temp[k++]=a[j++];}else{temp[k++]=a[i++];}}while(i<=mid){temp[k++]=a[i++];}while(j<=r){temp[k++]=a[j++];}//复制for(i=l;i<=r;i++){a[i]=temp[i];}return;}voidmerge(inta[],intl,intr,inttemp[]){if(l<r){intmid=(l+r)/2;merge(a,l,mid,temp);merge(a,mid+1,r,temp);merge_sort(a,temp,l,mid,r);}}intmain(){intn;cin>>n;inti;for(i=1;i<=n;i++){cin>>a[i];}merge(a,1,n,temp);cout<<ans<<endl;return0;}