#include <iostream>#include <vector>using namespace std;int mergeSort(vector<int>& nums, vector<int>& temp, int left, int right) {    if (left >= right) return 0;    int mid = (left + right) / 2;    int res = mergeSort(nums, temp, left, mid) + mergeSort(nums, temp, mid + 1, right);    int i = left, j = mid + 1;    for (int k = left; k <= right; k++) {        if (i == mid + 1)            temp[k] = nums[j++];        else if (j == right + 1 || nums[i] <= nums[j])            temp[k] = nums[i++];        else {            temp[k] = nums[j++];            res += mid - i + 1;        }    }    copy(temp.begin() + left, temp.begin() + right + 1, nums.begin() + left);    return res;}int main() {    int n;    cin >> n;    vector<int> nums(n);    for (int i = 0; i < n; i++) cin >> nums[i];    vector<int> temp(n);    cout << mergeSort(nums, temp, 0, n - 1) << endl;    return 0;}#include<iostream>#include<vector>usingnamespacestd;intmergeSort(vector<int>&nums,vector<int>&temp,intleft,intright){if(left>=right)return0;intmid=(left+right)/2;intres=mergeSort(nums,temp,left,mid)+mergeSort(nums,temp,mid+1,right);inti=left,j=mid+1;for(intk=left;k<=right;k++){if(i==mid+1)temp[k]=nums[j++];elseif(j==right+1||nums[i]<=nums[j])temp[k]=nums[i++];else{temp[k]=nums[j++];res+=mid-i+1;}}copy(temp.begin()+left,temp.begin()+right+1,nums.begin()+left);returnres;}intmain(){intn;cin>>n;vector<int>nums(n);for(inti=0;i<n;i++)cin>>nums[i];vector<int>temp(n);cout<<mergeSort(nums,temp,0,n-1)<<endl;return0;}#include<iostream>#include<vector>usingnamespacestd;intmergeSort(vector<int>&nums,vector<int>&temp,intleft,intright){if(left>=right)return0;intmid=(left+right)/2;intres=mergeSort(nums,temp,left,mid)+mergeSort(nums,temp,mid+1,right);inti=left,j=mid+1;for(intk=left;k<=right;k++){if(i==mid+1)temp[k]=nums[j++];elseif(j==right+1||nums[i]<=nums[j])temp[k]=nums[i++];else{temp[k]=nums[j++];res+=mid-i+1;}}copy(temp.begin()+left,temp.begin()+right+1,nums.begin()+left);returnres;}intmain(){intn;cin>>n;vector<int>nums(n);for(inti=0;i<n;i++)cin>>nums[i];vector<int>temp(n);cout<<mergeSort(nums,temp,0,n-1)<<endl;return0;}#include<iostream>#include<vector>usingnamespacestd;intmergeSort(vector<int>&nums,vector<int>&temp,intleft,intright){if(left>=right)return0;intmid=(left+right)/2;intres=mergeSort(nums,temp,left,mid)+mergeSort(nums,temp,mid+1,right);inti=left,j=mid+1;for(intk=left;k<=right;k++){if(i==mid+1)temp[k]=nums[j++];elseif(j==right+1||nums[i]<=nums[j])temp[k]=nums[i++];else{temp[k]=nums[j++];res+=mid-i+1;}}copy(temp.begin()+left,temp.begin()+right+1,nums.begin()+left);returnres;}intmain(){intn;cin>>n;vector<int>nums(n);for(inti=0;i<n;i++)cin>>nums[i];vector<int>temp(n);cout<<mergeSort(nums,temp,0,n-1)<<endl;return0;}