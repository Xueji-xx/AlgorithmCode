#include <stdio.h>int merge(int a[], int l, int m, int r){    int i, j, k;    int n1 = m - l + 1;    int n2 = r - m;    /* 创建临时数组 */    int L[n1], R[n2];    /* 复制数据到临时数组 L 和 R */    for (i = 0; i < n1; i++)        L[i] = a[l + i];    for (j = 0; j < n2; j++)        R[j] = a[m + 1 + j];    /* 合并临时数组回原始数组 */    i = 0;    j = 0;    k = l;    int count = 0; /* 逆序对计数器 */    while (i < n1 && j < n2) {        if (L[i] <= R[j]) {            a[k++] = L[i++];        } else {            a[k++] = R[j++];            count += n1 - i; /* 统计逆序对数量 */        }    }    /* 复制剩余元素到原始数组 */    while (i < n1) {        a[k++] = L[i++];    }    while (j < n2) {        a[k++] = R[j++];    }    return count;}int merge_sort(int a[], int l, int r){    int count = 0;    if (l < r) {        int m = l + (r - l) / 2;        count += merge_sort(a, l, m);        count += merge_sort(a, m + 1, r);        count += merge(a, l, m, r);    }    return count;}int main(){    int n;    scanf("%d",&n);    int num[n];    for(int i = 0; i < n; i++){        scanf("%d",&num[i]);    }    int count = merge_sort(num, 0, n - 1);    printf("%d", count); /* 输出逆序对数量 */    return 0;}#include<stdio.h>intmerge(inta[],intl,intm,intr){inti,j,k;intn1=m-l+1;intn2=r-m;/*创建临时数组*/intL[n1],R[n2];/*复制数据到临时数组L和R*/for(i=0;i<n1;i++)L[i]=a[l+i];for(j=0;j<n2;j++)R[j]=a[m+1+j];/*合并临时数组回原始数组*/i=0;j=0;k=l;intcount=0;/*逆序对计数器*/while(i<n1&&j<n2){if(L[i]<=R[j]){a[k++]=L[i++];}else{a[k++]=R[j++];count+=n1-i;/*统计逆序对数量*/}}/*复制剩余元素到原始数组*/while(i<n1){a[k++]=L[i++];}while(j<n2){a[k++]=R[j++];}returncount;}intmerge_sort(inta[],intl,intr){intcount=0;if(l<r){intm=l+(r-l)/2;count+=merge_sort(a,l,m);count+=merge_sort(a,m+1,r);count+=merge(a,l,m,r);}returncount;}intmain(){intn;scanf("%d",&n);intnum[n];for(inti=0;i<n;i++){scanf("%d",&num[i]);}intcount=merge_sort(num,0,n-1);printf("%d",count);/*输出逆序对数量*/return0;}#include<stdio.h>intmerge(inta[],intl,intm,intr){inti,j,k;intn1=m-l+1;intn2=r-m;/*创建临时数组*/intL[n1],R[n2];/*复制数据到临时数组L和R*/for(i=0;i<n1;i++)L[i]=a[l+i];for(j=0;j<n2;j++)R[j]=a[m+1+j];/*合并临时数组回原始数组*/i=0;j=0;k=l;intcount=0;/*逆序对计数器*/while(i<n1&&j<n2){if(L[i]<=R[j]){a[k++]=L[i++];}else{a[k++]=R[j++];count+=n1-i;/*统计逆序对数量*/}}/*复制剩余元素到原始数组*/while(i<n1){a[k++]=L[i++];}while(j<n2){a[k++]=R[j++];}returncount;}intmerge_sort(inta[],intl,intr){intcount=0;if(l<r){intm=l+(r-l)/2;count+=merge_sort(a,l,m);count+=merge_sort(a,m+1,r);count+=merge(a,l,m,r);}returncount;}intmain(){intn;scanf("%d",&n);intnum[n];for(inti=0;i<n;i++){scanf("%d",&num[i]);}intcount=merge_sort(num,0,n-1);printf("%d",count);/*输出逆序对数量*/return0;}#include<stdio.h>intmerge(inta[],intl,intm,intr){inti,j,k;intn1=m-l+1;intn2=r-m;/*创建临时数组*/intL[n1],R[n2];/*复制数据到临时数组L和R*/for(i=0;i<n1;i++)L[i]=a[l+i];for(j=0;j<n2;j++)R[j]=a[m+1+j];/*合并临时数组回原始数组*/i=0;j=0;k=l;intcount=0;/*逆序对计数器*/while(i<n1&&j<n2){if(L[i]<=R[j]){a[k++]=L[i++];}else{a[k++]=R[j++];count+=n1-i;/*统计逆序对数量*/}}/*复制剩余元素到原始数组*/while(i<n1){a[k++]=L[i++];}while(j<n2){a[k++]=R[j++];}returncount;}intmerge_sort(inta[],intl,intr){intcount=0;if(l<r){intm=l+(r-l)/2;count+=merge_sort(a,l,m);count+=merge_sort(a,m+1,r);count+=merge(a,l,m,r);}returncount;}intmain(){intn;scanf("%d",&n);intnum[n];for(inti=0;i<n;i++){scanf("%d",&num[i]);}intcount=merge_sort(num,0,n-1);printf("%d",count);/*输出逆序对数量*/return0;}