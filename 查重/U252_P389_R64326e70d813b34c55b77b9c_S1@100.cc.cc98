#include <stdio.h>#include <stdlib.h>long long merge(int arr[],int l,int m,int r){    int i,j,k;    long long cnt=0;    int n1=m-l+1;    int n2=r-m;    int L[n1],R[n2];    for(i=0;i<n1;i++)        L[i]=arr[l+i];    for(j=0;j<n2;j++)        R[j]=arr[m+1+j];    i=0;    j=0;    k=l;    while(i<n1&&j<n2) 	{        if(L[i]<=R[j]) 		{            arr[k++]=L[i++];        }        else 		{            arr[k++]=R[j++];            cnt+=(long long)(n1-i);        }    }    while(i<n1) 	{        arr[k++]=L[i++];    }    while(j<n2) 	{        arr[k++]=R[j++];    }    return cnt;}long long mergeSort(int arr[],int l,int r){    long long cnt=0;    if(l<r) 	{        int m=l+(r-l)/2;        cnt+=mergeSort(arr,l,m);        cnt+=mergeSort(arr,m+1,r);        cnt+=merge(arr,l,m,r);    }    return cnt;}int main(){    int n,i;    scanf("%d",&n);    int arr[n];    for (i=0;i<n;i++) 	{        scanf("%d",&arr[i]);    }    long long cnt=mergeSort(arr,0,n-1);    printf("%lld\n",cnt);    return 0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intl,intm,intr){inti,j,k;longlongcnt=0;intn1=m-l+1;intn2=r-m;intL[n1],R[n2];for(i=0;i<n1;i++)L[i]=arr[l+i];for(j=0;j<n2;j++)R[j]=arr[m+1+j];i=0;j=0;k=l;while(i<n1&&j<n2)	{if(L[i]<=R[j])		{arr[k++]=L[i++];}else		{arr[k++]=R[j++];cnt+=(longlong)(n1-i);}}while(i<n1)	{arr[k++]=L[i++];}while(j<n2)	{arr[k++]=R[j++];}returncnt;}longlongmergeSort(intarr[],intl,intr){longlongcnt=0;if(l<r)	{intm=l+(r-l)/2;cnt+=mergeSort(arr,l,m);cnt+=mergeSort(arr,m+1,r);cnt+=merge(arr,l,m,r);}returncnt;}intmain(){intn,i;scanf("%d",&n);intarr[n];for(i=0;i<n;i++)	{scanf("%d",&arr[i]);}longlongcnt=mergeSort(arr,0,n-1);printf("%lld\n",cnt);return0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intl,intm,intr){inti,j,k;longlongcnt=0;intn1=m-l+1;intn2=r-m;intL[n1],R[n2];for(i=0;i<n1;i++)L[i]=arr[l+i];for(j=0;j<n2;j++)R[j]=arr[m+1+j];i=0;j=0;k=l;while(i<n1&&j<n2){if(L[i]<=R[j]){arr[k++]=L[i++];}else{arr[k++]=R[j++];cnt+=(longlong)(n1-i);}}while(i<n1){arr[k++]=L[i++];}while(j<n2){arr[k++]=R[j++];}returncnt;}longlongmergeSort(intarr[],intl,intr){longlongcnt=0;if(l<r){intm=l+(r-l)/2;cnt+=mergeSort(arr,l,m);cnt+=mergeSort(arr,m+1,r);cnt+=merge(arr,l,m,r);}returncnt;}intmain(){intn,i;scanf("%d",&n);intarr[n];for(i=0;i<n;i++){scanf("%d",&arr[i]);}longlongcnt=mergeSort(arr,0,n-1);printf("%lld\n",cnt);return0;}#include<stdio.h>#include<stdlib.h>longlongmerge(intarr[],intl,intm,intr){inti,j,k;longlongcnt=0;intn1=m-l+1;intn2=r-m;intL[n1],R[n2];for(i=0;i<n1;i++)L[i]=arr[l+i];for(j=0;j<n2;j++)R[j]=arr[m+1+j];i=0;j=0;k=l;while(i<n1&&j<n2){if(L[i]<=R[j]){arr[k++]=L[i++];}else{arr[k++]=R[j++];cnt+=(longlong)(n1-i);}}while(i<n1){arr[k++]=L[i++];}while(j<n2){arr[k++]=R[j++];}returncnt;}longlongmergeSort(intarr[],intl,intr){longlongcnt=0;if(l<r){intm=l+(r-l)/2;cnt+=mergeSort(arr,l,m);cnt+=mergeSort(arr,m+1,r);cnt+=merge(arr,l,m,r);}returncnt;}intmain(){intn,i;scanf("%d",&n);intarr[n];for(i=0;i<n;i++){scanf("%d",&arr[i]);}longlongcnt=mergeSort(arr,0,n-1);printf("%lld\n",cnt);return0;}