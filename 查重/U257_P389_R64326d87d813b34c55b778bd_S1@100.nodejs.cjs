const readline = require("readline")const rl = readline.createInterface({  input: process.stdin,  output: process.stdout})const count_time = (q, l, r) => {  if (l >= r) return 0  const mid = Math.floor((l + r) / 2)  let res = count_time(q, l, mid) + count_time(q, mid + 1, r)  let i = l  let j = mid + 1  let k = 0  const temp = []  while (i <= mid && j <= r) {    if (q[i] <= q[j]) {      temp[k++] = q[i++]    } else {      temp[k++] = q[j++]      res += mid - i + 1    }  }  while (i <= mid) {    temp[k++] = q[i++]  }  while (j <= r) temp[k++] = q[j++]  for (let i = l, j = 0; i <= r; i++, j++) {    q[i] = temp[j]  }  return res}const num = 2let rows = []rl.on("line", function (data) {  rows.push(data.split(" ").filter(s => s !== '').map(x => parseInt(x)))  if (num === rows.length) {    const n = parseInt(rows[0][0])    const q = rows[1]    console.log(count_time(q, 0, n-1))  }})constreadline=require("readline")constrl=readline.createInterface({input:process.stdin,output:process.stdout})constcount_time=(q,l,r)=>{if(l>=r)return0constmid=Math.floor((l+r)/2)letres=count_time(q,l,mid)+count_time(q,mid+1,r)leti=lletj=mid+1letk=0consttemp=[]while(i<=mid&&j<=r){if(q[i]<=q[j]){temp[k++]=q[i++]}else{temp[k++]=q[j++]res+=mid-i+1}}while(i<=mid){temp[k++]=q[i++]}while(j<=r)temp[k++]=q[j++]for(leti=l,j=0;i<=r;i++,j++){q[i]=temp[j]}returnres}constnum=2letrows=[]rl.on("line",function(data){rows.push(data.split("").filter(s=>s!=='').map(x=>parseInt(x)))if(num===rows.length){constn=parseInt(rows[0][0])constq=rows[1]console.log(count_time(q,0,n-1))}})constreadline=require("readline")constrl=readline.createInterface({input:process.stdin,output:process.stdout})constcount_time=(q,l,r)=>{if(l>=r)return0constmid=Math.floor((l+r)/2)letres=count_time(q,l,mid)+count_time(q,mid+1,r)leti=lletj=mid+1letk=0consttemp=[]while(i<=mid&&j<=r){if(q[i]<=q[j]){temp[k++]=q[i++]}else{temp[k++]=q[j++]res+=mid-i+1}}while(i<=mid){temp[k++]=q[i++]}while(j<=r)temp[k++]=q[j++]for(leti=l,j=0;i<=r;i++,j++){q[i]=temp[j]}returnres}constnum=2letrows=[]rl.on("line",function(data){rows.push(data.split("").filter(s=>s!=='').map(x=>parseInt(x)))if(num===rows.length){constn=parseInt(rows[0][0])constq=rows[1]console.log(count_time(q,0,n-1))}})constreadline=require("readline")constrl=readline.createInterface({input:process.stdin,output:process.stdout})constcount_time=(q,l,r)=>{if(l>=r)return0constmid=Math.floor((l+r)/2)letres=count_time(q,l,mid)+count_time(q,mid+1,r)leti=lletj=mid+1letk=0consttemp=[]while(i<=mid&&j<=r){if(q[i]<=q[j]){temp[k++]=q[i++]}else{temp[k++]=q[j++]res+=mid-i+1}}while(i<=mid){temp[k++]=q[i++]}while(j<=r)temp[k++]=q[j++]for(leti=l,j=0;i<=r;i++,j++){q[i]=temp[j]}returnres}constnum=2letrows=[]rl.on("line",function(data){rows.push(data.split("").filter(s=>s!=='').map(x=>parseInt(x)))if(num===rows.length){constn=parseInt(rows[0][0])constq=rows[1]console.log(count_time(q,0,n-1))}})